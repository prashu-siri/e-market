{"ast":null,"code":"import { environment } from '../../environments/environment';\nimport { Subject } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"angular2-notifications\";\nexport class MarketService {\n  constructor(http, notificationsService) {\n    this.http = http;\n    this.notificationsService = notificationsService;\n    this.baseUrl = environment.apiUrl;\n    this.blogPosts = [];\n    this.products = [];\n    this.productAddedSource = new Subject();\n    this.productAdded$ = this.productAddedSource;\n    this.pageNameSource = new Subject();\n    this.pageName$ = this.pageNameSource;\n  }\n  fetchFeaturedProducts() {\n    const path = this.baseUrl + 'featuredProducts';\n    return this.http.get(path).pipe(map(products => {\n      products.forEach(product => {\n        product.quantity = 1;\n      });\n      return products;\n    }));\n  }\n  fetchReviews() {\n    const path = this.baseUrl + 'reviews';\n    return this.http.get(path);\n  }\n  fetchPosts() {\n    const path = this.baseUrl + 'posts';\n    return this.http.get(path);\n  }\n  fetchPost(id) {\n    const path = this.baseUrl + `posts/${id}`;\n    return this.http.get(path);\n  }\n  setBlogPosts(blogs) {\n    this.blogPosts = blogs;\n  }\n  getBlogPosts() {\n    return this.blogPosts;\n  }\n  fetchProducts(productType) {\n    const path = productType == 'fruit' ? 'fruits' : 'vegetables';\n    const url = this.baseUrl + path;\n    return this.http.get(url).pipe(map(products => {\n      products.forEach(product => {\n        product.quantity = 1;\n      });\n      return products;\n    }));\n  }\n  addToCart(product) {\n    product.noOfItems = product.quantity;\n    if (this.products.length > 0) {\n      const itemFound = this.products.find(details => {\n        return details.id == product.id;\n      });\n      let item = itemFound?.noOfItems ?? 0;\n      let quantity = product.quantity ?? 0;\n      itemFound ? item += quantity : this.products.push(product);\n    } else {\n      this.products.push(product);\n    }\n    this.setProducts(this.products);\n    this.sendNotification();\n    this.notificationsService.success('Item Added!', `${product.name} is added to cart`, {\n      timeOut: 1000,\n      showProgressBar: false,\n      pauseOnHover: true,\n      clickToClose: false,\n      clickIconToClose: false,\n      preventDuplicates: true\n    });\n  }\n  getProducts() {\n    return sessionStorage.getItem('products') ?? '';\n  }\n  setProducts(products) {\n    this.products = products;\n    sessionStorage.setItem('products', JSON.stringify(products));\n    this.sendNotification();\n  }\n  removeProducts() {\n    sessionStorage.removeItem('products');\n  }\n  sendNotification() {\n    this.productAddedSource.next(this.products);\n  }\n  fetchStates() {\n    const path = this.baseUrl + 'states';\n    return this.http.get(path);\n  }\n  placeOrder(products, shipping, billing, customer) {\n    const path = this.baseUrl + 'orders';\n    const params = {\n      products: products,\n      shipping: shipping,\n      billing: billing,\n      email: customer.email\n    };\n    return this.http.post(path, JSON.stringify(params));\n  }\n  getOrders(email) {\n    const path = this.baseUrl + 'orders?email=' + email;\n    return this.http.get(path);\n  }\n  setpageName(pageName) {\n    this.pageNameSource.next(pageName);\n  }\n  static {\n    this.ɵfac = function MarketService_Factory(t) {\n      return new (t || MarketService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.NotificationsService));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: MarketService,\n      factory: MarketService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["environment","Subject","map","MarketService","constructor","http","notificationsService","baseUrl","apiUrl","blogPosts","products","productAddedSource","productAdded$","pageNameSource","pageName$","fetchFeaturedProducts","path","get","pipe","forEach","product","quantity","fetchReviews","fetchPosts","fetchPost","id","setBlogPosts","blogs","getBlogPosts","fetchProducts","productType","url","addToCart","noOfItems","length","itemFound","find","details","item","push","setProducts","sendNotification","success","name","timeOut","showProgressBar","pauseOnHover","clickToClose","clickIconToClose","preventDuplicates","getProducts","sessionStorage","getItem","setItem","JSON","stringify","removeProducts","removeItem","next","fetchStates","placeOrder","shipping","billing","customer","params","email","post","getOrders","setpageName","pageName","i0","ɵɵinject","i1","HttpClient","i2","NotificationsService","factory","ɵfac","providedIn"],"sources":["D:\\Development\\Angular\\e-commerce\\src\\app\\service\\market.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { environment } from '../../environments/environment';\nimport { HttpClient } from '@angular/common/http';\nimport { Review } from '../interface/review';\nimport { Observable, Subject } from 'rxjs';\nimport { Post } from '../interface/post';\nimport { Product } from '../interface/product';\nimport { map } from 'rxjs/operators';\nimport { NotificationsService } from 'angular2-notifications';\n\n@Injectable({\n\tprovidedIn: 'root',\n})\nexport class MarketService {\n\tbaseUrl: string = environment.apiUrl;\n\tblogPosts: Post[] = [];\n\tproducts: Product[] = [];\n\tprivate productAddedSource: Subject<Product> = new Subject<Product>();\n\tproductAdded$ = this.productAddedSource as Observable<Product>;\n\tprivate pageNameSource: Subject<string> = new Subject<string>();\n\tpageName$ = this.pageNameSource as Observable<string>;\n\n\tconstructor(\n\t\tprivate http: HttpClient,\n\t\tprivate notificationsService: NotificationsService\n\t) {}\n\n\tfetchFeaturedProducts(): Observable<Product[]> {\n\t\tconst path = this.baseUrl + 'featuredProducts';\n\n\t\treturn this.http.get<Product[]>(path).pipe(\n\t\t\tmap((products) => {\n\t\t\t\tproducts.forEach((product: Product) => {\n\t\t\t\t\tproduct.quantity = 1;\n\t\t\t\t});\n\t\t\t\treturn products;\n\t\t\t})\n\t\t);\n\t}\n\n\tfetchReviews(): Observable<Review[]> {\n\t\tconst path = this.baseUrl + 'reviews';\n\n\t\treturn this.http.get<Review[]>(path);\n\t}\n\n\tfetchPosts(): Observable<Post[]> {\n\t\tconst path = this.baseUrl + 'posts';\n\t\treturn this.http.get<Post[]>(path);\n\t}\n\n\tfetchPost(id: number): Observable<Post> {\n\t\tconst path = this.baseUrl + `posts/${id}`;\n\t\treturn this.http.get<Post>(path);\n\t}\n\n\tsetBlogPosts(blogs: Post[]) {\n\t\tthis.blogPosts = blogs;\n\t}\n\n\tgetBlogPosts() {\n\t\treturn this.blogPosts;\n\t}\n\n\tfetchProducts(productType: string): Observable<Product[]> {\n\t\tconst path = productType == 'fruit' ? 'fruits' : 'vegetables';\n\t\tconst url = this.baseUrl + path;\n\n\t\treturn this.http.get<Product[]>(url).pipe(\n\t\t\tmap((products) => {\n\t\t\t\tproducts.forEach((product: Product) => {\n\t\t\t\t\tproduct.quantity = 1;\n\t\t\t\t});\n\t\t\t\treturn products;\n\t\t\t})\n\t\t);\n\t}\n\n\taddToCart(product: Product) {\n\t\tproduct.noOfItems = product.quantity;\n\t\tif (this.products.length > 0) {\n\t\t\tconst itemFound = this.products.find((details) => {\n\t\t\t\treturn details.id == product.id;\n\t\t\t});\n\n\t\t\tlet item = itemFound?.noOfItems ?? 0;\n\t\t\tlet quantity = product.quantity ?? 0;\n\n\t\t\titemFound ? (item += quantity) : this.products.push(product);\n\t\t} else {\n\t\t\tthis.products.push(product);\n\t\t}\n\n\t\tthis.setProducts(this.products);\n\t\tthis.sendNotification();\n\t\tthis.notificationsService.success(\n\t\t\t'Item Added!',\n\t\t\t`${product.name} is added to cart`,\n\t\t\t{\n\t\t\t\ttimeOut: 1000,\n\t\t\t\tshowProgressBar: false,\n\t\t\t\tpauseOnHover: true,\n\t\t\t\tclickToClose: false,\n\t\t\t\tclickIconToClose: false,\n\t\t\t\tpreventDuplicates: true,\n\t\t\t}\n\t\t);\n\t}\n\n\tgetProducts(): string {\n\t\treturn sessionStorage.getItem('products') ?? '';\n\t}\n\n\tsetProducts(products: Product[]) {\n\t\tthis.products = products;\n\t\tsessionStorage.setItem('products', JSON.stringify(products));\n\t\tthis.sendNotification();\n\t}\n\n\tremoveProducts() {\n\t\tsessionStorage.removeItem('products');\n\t}\n\n\tsendNotification(): void {\n\t\tthis.productAddedSource.next(this.products);\n\t}\n\n\tfetchStates() {\n\t\tconst path = this.baseUrl + 'states';\n\n\t\treturn this.http.get(path);\n\t}\n\n\tplaceOrder(\n\t\tproducts: Product[],\n\t\tshipping: any,\n\t\tbilling: any,\n\t\tcustomer: any\n\t) {\n\t\tconst path = this.baseUrl + 'orders';\n\n\t\tconst params = {\n\t\t\tproducts: products,\n\t\t\tshipping: shipping,\n\t\t\tbilling: billing,\n\t\t\temail: customer.email,\n\t\t};\n\n\t\treturn this.http.post(path, JSON.stringify(params));\n\t}\n\n\tgetOrders(email: any) {\n\t\tconst path = this.baseUrl + 'orders?email=' + email;\n\n\t\treturn this.http.get(path);\n\t}\n\n\tsetpageName(pageName: string) {\n\t\tthis.pageNameSource.next(pageName);\n\t}\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}