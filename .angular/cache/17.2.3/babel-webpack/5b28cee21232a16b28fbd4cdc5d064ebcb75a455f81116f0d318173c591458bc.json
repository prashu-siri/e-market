{"ast":null,"code":"import { environment } from '../../environments/environment';\nimport { HttpParams } from '@angular/common/http';\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.currentRoute = '';\n    this.basePath = environment.apiUrl;\n  }\n  setLogin(login) {\n    const loginDetails = {\n      firstName: login.firstName,\n      lastName: login.lastName,\n      email: login.email\n    };\n    sessionStorage.setItem('login', JSON.stringify(loginDetails));\n  }\n  isLoggedIn() {\n    return sessionStorage.getItem('login') !== null;\n  }\n  getLoggedInUser() {\n    return JSON.parse(sessionStorage.getItem('login') ?? '');\n  }\n  signOut() {\n    sessionStorage.removeItem('login');\n  }\n  login(value) {\n    const requestParams = new HttpParams().set('email', value.email);\n    return this.http.get(this.basePath + 'marketLogin', {\n      params: requestParams\n    }).pipe(map(response => {\n      if (response.length > 0) {\n        this.setLogin(response[0]);\n        return response[0];\n      } else {\n        return null;\n      }\n    }));\n  }\n  signUp(value) {\n    return this.http.post(this.basePath + 'marketLogin', JSON.stringify(value));\n  }\n  setCurrentRoute(url) {\n    this.currentRoute = url;\n  }\n  static {\n    this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["environment","HttpParams","map","AuthService","constructor","http","currentRoute","basePath","apiUrl","setLogin","login","loginDetails","firstName","lastName","email","sessionStorage","setItem","JSON","stringify","isLoggedIn","getItem","getLoggedInUser","parse","signOut","removeItem","value","requestParams","set","get","params","pipe","response","length","signUp","post","setCurrentRoute","url","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["D:\\Development\\Angular\\e-commerce\\src\\app\\service\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { environment } from '../../environments/environment';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { map } from 'rxjs/operators';\nimport { Login } from '../interface/login';\n\n@Injectable({\n\tprovidedIn: 'root',\n})\nexport class AuthService {\n\tbasePath;\n\tcurrentRoute: string = '';\n\n\tconstructor(private http: HttpClient) {\n\t\tthis.basePath = environment.apiUrl;\n\t}\n\n\tsetLogin(login: any) {\n\t\tconst loginDetails = {\n\t\t\tfirstName: login.firstName,\n\t\t\tlastName: login.lastName,\n\t\t\temail: login.email,\n\t\t};\n\t\tsessionStorage.setItem('login', JSON.stringify(loginDetails));\n\t}\n\n\tisLoggedIn() {\n\t\treturn sessionStorage.getItem('login') !== null;\n\t}\n\n\tgetLoggedInUser() {\n\t\treturn JSON.parse(sessionStorage.getItem('login') ?? '');\n\t}\n\n\tsignOut() {\n\t\tsessionStorage.removeItem('login');\n\t}\n\n\tlogin(value: any) {\n\t\tconst requestParams = new HttpParams().set('email', value.email);\n\t\treturn this.http\n\t\t\t.get<Login[]>(this.basePath + 'marketLogin', {\n\t\t\t\tparams: requestParams,\n\t\t\t})\n\t\t\t.pipe(\n\t\t\t\tmap((response: Login[]) => {\n\t\t\t\t\tif (response.length > 0) {\n\t\t\t\t\t\tthis.setLogin(response[0]);\n\t\t\t\t\t\treturn response[0];\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t);\n\t}\n\n\tsignUp(value: any) {\n\t\treturn this.http.post(\n\t\t\tthis.basePath + 'marketLogin',\n\t\t\tJSON.stringify(value)\n\t\t);\n\t}\n\n\tsetCurrentRoute(url: string) {\n\t\tthis.currentRoute = url;\n\t}\n}\n"],"mappings":"AACA,SAASA,WAAW,QAAQ,gCAAgC;AAC5D,SAAqBC,UAAU,QAAQ,sBAAsB;AAC7D,SAASC,GAAG,QAAQ,gBAAgB;;;AAMpC,OAAM,MAAOC,WAAW;EAIvBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFxB,KAAAC,YAAY,GAAW,EAAE;IAGxB,IAAI,CAACC,QAAQ,GAAGP,WAAW,CAACQ,MAAM;EACnC;EAEAC,QAAQA,CAACC,KAAU;IAClB,MAAMC,YAAY,GAAG;MACpBC,SAAS,EAAEF,KAAK,CAACE,SAAS;MAC1BC,QAAQ,EAAEH,KAAK,CAACG,QAAQ;MACxBC,KAAK,EAAEJ,KAAK,CAACI;KACb;IACDC,cAAc,CAACC,OAAO,CAAC,OAAO,EAAEC,IAAI,CAACC,SAAS,CAACP,YAAY,CAAC,CAAC;EAC9D;EAEAQ,UAAUA,CAAA;IACT,OAAOJ,cAAc,CAACK,OAAO,CAAC,OAAO,CAAC,KAAK,IAAI;EAChD;EAEAC,eAAeA,CAAA;IACd,OAAOJ,IAAI,CAACK,KAAK,CAACP,cAAc,CAACK,OAAO,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;EACzD;EAEAG,OAAOA,CAAA;IACNR,cAAc,CAACS,UAAU,CAAC,OAAO,CAAC;EACnC;EAEAd,KAAKA,CAACe,KAAU;IACf,MAAMC,aAAa,GAAG,IAAIzB,UAAU,EAAE,CAAC0B,GAAG,CAAC,OAAO,EAAEF,KAAK,CAACX,KAAK,CAAC;IAChE,OAAO,IAAI,CAACT,IAAI,CACduB,GAAG,CAAU,IAAI,CAACrB,QAAQ,GAAG,aAAa,EAAE;MAC5CsB,MAAM,EAAEH;KACR,CAAC,CACDI,IAAI,CACJ5B,GAAG,CAAE6B,QAAiB,IAAI;MACzB,IAAIA,QAAQ,CAACC,MAAM,GAAG,CAAC,EAAE;QACxB,IAAI,CAACvB,QAAQ,CAACsB,QAAQ,CAAC,CAAC,CAAC,CAAC;QAC1B,OAAOA,QAAQ,CAAC,CAAC,CAAC;OAClB,MAAM;QACN,OAAO,IAAI;;IAEb,CAAC,CAAC,CACF;EACH;EAEAE,MAAMA,CAACR,KAAU;IAChB,OAAO,IAAI,CAACpB,IAAI,CAAC6B,IAAI,CACpB,IAAI,CAAC3B,QAAQ,GAAG,aAAa,EAC7BU,IAAI,CAACC,SAAS,CAACO,KAAK,CAAC,CACrB;EACF;EAEAU,eAAeA,CAACC,GAAW;IAC1B,IAAI,CAAC9B,YAAY,GAAG8B,GAAG;EACxB;;;uBAxDYjC,WAAW,EAAAkC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAXrC,WAAW;MAAAsC,OAAA,EAAXtC,WAAW,CAAAuC,IAAA;MAAAC,UAAA,EAFX;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}